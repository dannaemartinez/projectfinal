version: '3'
services:
  postgres_db06:
    image: postgres:14-alpine
    container_name: "proyect_postgres${PORT}"
    environment:
      - "POSTGRES_PASSWORD=${PSQL_PASS}"
      - "POSTGRES_DB=${PSQL_DB}"
      - "POSTGRES_USER=${PSQL_USER}"
      - "POSTGRES_USERNAME:${PSQL_USER}"
      - "POSTGRES_USER:${PSQL_USER}"
    ports:
      - "100${PORT}:55${PORT}"
    volumes:
      #- "${POSTGRES_VOLUME_PATH}:/usr/src/postgres"
      - "${POSTGRES_VOLUME_PATH}:/usr/src/postgres"
    networks:
      - our-library-net
    command: "-p 55${PORT}"

  redis_service06:
    image: redis:7-alpine
    container_name: "redis${PORT}"
    environment:
      - "SOME_REDIS_ENV=whatever"
    command: "--port 63${PORT}"
    ports:
      - "120${PORT}:63${PORT}"
    volumes: 
      - "${REDIS_VOLUME_PATH}:/usr/local/etc/redis"
    networks:
      - our-library-net

  web06:
    build: 
      context: ./backend
    image: my-django-image06:2.0.0
    #command: bash -c "python manage.py makemigrations && python manage.py migrate && pytest && python manage.py runserver 0.0.0.0:80${PORT}"
    command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:80${PORT}"
    #command: bash -c "python manage.py runserver 0.0.0.0:80${PORT}"
    container_name: "django${PORT}"
    depends_on: 
      - postgres_db06
      - redis_service06
    environment:
      - "PSQL_DBNAME=${PSQL_DB}"
      - "PSQL_USERNAME=${PSQL_USER}"
      - "PSQL_PASS=${PSQL_PASS}"
      - "PSQL_HOST=postgres_db${PORT}" # You must use the previous command in order to get this HOST
      - "PSQL_PORT=55${PORT}"
      - "JWT_TOKEN_TIME=${JWT_TOKEN_TIME}"
      - "REDIS_HOST=redis_service${PORT}"
      - "REDIS_PORT=63${PORT}"
    volumes:
    # "RUTA/DEL/SERVIDOR:RUTA/DENTRO/DEL/CONTENEDOR"
      #- "/home/dannae_martinez/django/Django-REST-Exercise:/usr/src/django/library"
       - "${DJANGO_VOLUME_PATH}:/usr/src/django/library"
    ports:
      - "90${PORT}:80${PORT}"
      # - 3001:3001 #debug port for debugpy (configured in manage.py)
    networks:
      - our-library-net

  front06:
    build: 
      context: ./frontend
      args:
        - BASE_API_URI=${BASE_API_URI}
    image: node06:18-alpine3.14
    command: "sh -c 'npm install && npm dedupe && npm cache clear --force && npm start'"
    container_name: "react${PORT}"
    depends_on: 
      - web06
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - "${REACT_DEV_VOLUME_PATH}:/usr/src/frontend"
      - "${REACT_DEV_VOLUME_PATH}/node_modules:/usr/src/frontend/node_modules"
    ports:
      - "110${PORT}:3000"
    networks:
      - our-library-net

  front06:
    build: 
      context: ./frontend
    image: node06:18-alpine3.14
    command: "sh -c 'npm install && npm dedupe && npm cache clear --force && npm start'"
    container_name: "react${PORT}"
    depends_on: 
      - web06
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - "${REACT_DEV_VOLUME_PATH}:/usr/src/frontend"
      - "${REACT_DEV_VOLUME_PATH}/node_modules:/usr/src/frontend/node_modules"
    ports:
      - "110${PORT}:3000"
    networks:
      - our-library-net

networks:
  our-library-net:
    external: true
    driver: bridge